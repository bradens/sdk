/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment LaunchpadTokenEvent on LaunchpadTokenEventOutput {\n  address\n  buyCount1\n  devBurnt\n  devSold\n  devSoldAll\n  eventType\n  holders\n  marketCap\n  networkId\n  price\n  protocol\n  sellCount1\n  transactions1\n  volume1\n  token {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    createdAt\n    imageSmallUrl\n    exchanges {\n      id\n      address\n      networkId\n      name\n      iconUrl\n    }\n    info {\n      address\n      id\n      networkId\n      symbol\n      imageThumbUrl\n      imageSmallUrl\n      imageLargeUrl\n    }\n    socialLinks {\n      twitter\n      telegram\n      website\n      discord\n    }\n    launchpad {\n      graduationPercent\n      poolAddress\n      completedAt\n      completed\n      completedSlot\n      migratedSlot\n      migratedAt\n      migrated\n      migratedPoolAddress\n    }\n  }\n}\n\nsubscription OnLaunchpadTokenEventBatch($input: OnLaunchpadTokenEventBatchInput) {\n  onLaunchpadTokenEventBatch(input: $input) {\n    ...LaunchpadTokenEvent\n  }\n}": typeof types.LaunchpadTokenEventFragmentDoc,
    "fragment LaunchpadFilterTokenResult on TokenFilterResult {\n  buyCount1\n  createdAt\n  holders\n  marketCap\n  priceUSD\n  sellCount1\n  uniqueTransactions1\n  volume1\n  exchanges {\n    id\n    address\n    networkId\n    name\n    iconUrl\n  }\n  token {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    createdAt\n    imageSmallUrl\n    info {\n      address\n      id\n      networkId\n      symbol\n      imageThumbUrl\n      imageSmallUrl\n      imageLargeUrl\n    }\n    socialLinks {\n      twitter\n      telegram\n      website\n      discord\n    }\n    launchpad {\n      graduationPercent\n      poolAddress\n      completedAt\n      completed\n      completedSlot\n      migratedSlot\n      migratedAt\n      migrated\n      migratedPoolAddress\n    }\n  }\n  pair {\n    address\n    networkId\n    exchangeHash\n    token0\n    token1\n    id\n  }\n}\n\nquery LaunchpadTokens($filters: TokenFilters, $statsType: TokenPairStatisticsType, $phrase: String, $tokens: [String], $rankings: [TokenRanking], $limit: Int, $offset: Int) {\n  filterTokens(\n    filters: $filters\n    statsType: $statsType\n    phrase: $phrase\n    tokens: $tokens\n    rankings: $rankings\n    limit: $limit\n    offset: $offset\n  ) {\n    results {\n      ...LaunchpadFilterTokenResult\n    }\n    count\n    page\n  }\n}": typeof types.LaunchpadFilterTokenResultFragmentDoc,
    "fragment TokenPageItem on TokenFilterResult {\n  priceUSD\n  change24\n  volume24\n  txnCount24\n  lastTransaction\n  token {\n    id\n    address\n    name\n    symbol\n    info {\n      imageThumbUrl\n    }\n  }\n}\n\nquery TokensPage($filters: TokenFilters!, $rankings: [TokenRanking!], $limit: Int) {\n  filterTokens(filters: $filters, rankings: $rankings, limit: $limit) {\n    results {\n      ...TokenPageItem\n    }\n  }\n}": typeof types.TokenPageItemFragmentDoc,
};
const documents: Documents = {
    "fragment LaunchpadTokenEvent on LaunchpadTokenEventOutput {\n  address\n  buyCount1\n  devBurnt\n  devSold\n  devSoldAll\n  eventType\n  holders\n  marketCap\n  networkId\n  price\n  protocol\n  sellCount1\n  transactions1\n  volume1\n  token {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    createdAt\n    imageSmallUrl\n    exchanges {\n      id\n      address\n      networkId\n      name\n      iconUrl\n    }\n    info {\n      address\n      id\n      networkId\n      symbol\n      imageThumbUrl\n      imageSmallUrl\n      imageLargeUrl\n    }\n    socialLinks {\n      twitter\n      telegram\n      website\n      discord\n    }\n    launchpad {\n      graduationPercent\n      poolAddress\n      completedAt\n      completed\n      completedSlot\n      migratedSlot\n      migratedAt\n      migrated\n      migratedPoolAddress\n    }\n  }\n}\n\nsubscription OnLaunchpadTokenEventBatch($input: OnLaunchpadTokenEventBatchInput) {\n  onLaunchpadTokenEventBatch(input: $input) {\n    ...LaunchpadTokenEvent\n  }\n}": types.LaunchpadTokenEventFragmentDoc,
    "fragment LaunchpadFilterTokenResult on TokenFilterResult {\n  buyCount1\n  createdAt\n  holders\n  marketCap\n  priceUSD\n  sellCount1\n  uniqueTransactions1\n  volume1\n  exchanges {\n    id\n    address\n    networkId\n    name\n    iconUrl\n  }\n  token {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    createdAt\n    imageSmallUrl\n    info {\n      address\n      id\n      networkId\n      symbol\n      imageThumbUrl\n      imageSmallUrl\n      imageLargeUrl\n    }\n    socialLinks {\n      twitter\n      telegram\n      website\n      discord\n    }\n    launchpad {\n      graduationPercent\n      poolAddress\n      completedAt\n      completed\n      completedSlot\n      migratedSlot\n      migratedAt\n      migrated\n      migratedPoolAddress\n    }\n  }\n  pair {\n    address\n    networkId\n    exchangeHash\n    token0\n    token1\n    id\n  }\n}\n\nquery LaunchpadTokens($filters: TokenFilters, $statsType: TokenPairStatisticsType, $phrase: String, $tokens: [String], $rankings: [TokenRanking], $limit: Int, $offset: Int) {\n  filterTokens(\n    filters: $filters\n    statsType: $statsType\n    phrase: $phrase\n    tokens: $tokens\n    rankings: $rankings\n    limit: $limit\n    offset: $offset\n  ) {\n    results {\n      ...LaunchpadFilterTokenResult\n    }\n    count\n    page\n  }\n}": types.LaunchpadFilterTokenResultFragmentDoc,
    "fragment TokenPageItem on TokenFilterResult {\n  priceUSD\n  change24\n  volume24\n  txnCount24\n  lastTransaction\n  token {\n    id\n    address\n    name\n    symbol\n    info {\n      imageThumbUrl\n    }\n  }\n}\n\nquery TokensPage($filters: TokenFilters!, $rankings: [TokenRanking!], $limit: Int) {\n  filterTokens(filters: $filters, rankings: $rankings, limit: $limit) {\n    results {\n      ...TokenPageItem\n    }\n  }\n}": types.TokenPageItemFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LaunchpadTokenEvent on LaunchpadTokenEventOutput {\n  address\n  buyCount1\n  devBurnt\n  devSold\n  devSoldAll\n  eventType\n  holders\n  marketCap\n  networkId\n  price\n  protocol\n  sellCount1\n  transactions1\n  volume1\n  token {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    createdAt\n    imageSmallUrl\n    exchanges {\n      id\n      address\n      networkId\n      name\n      iconUrl\n    }\n    info {\n      address\n      id\n      networkId\n      symbol\n      imageThumbUrl\n      imageSmallUrl\n      imageLargeUrl\n    }\n    socialLinks {\n      twitter\n      telegram\n      website\n      discord\n    }\n    launchpad {\n      graduationPercent\n      poolAddress\n      completedAt\n      completed\n      completedSlot\n      migratedSlot\n      migratedAt\n      migrated\n      migratedPoolAddress\n    }\n  }\n}\n\nsubscription OnLaunchpadTokenEventBatch($input: OnLaunchpadTokenEventBatchInput) {\n  onLaunchpadTokenEventBatch(input: $input) {\n    ...LaunchpadTokenEvent\n  }\n}"): (typeof documents)["fragment LaunchpadTokenEvent on LaunchpadTokenEventOutput {\n  address\n  buyCount1\n  devBurnt\n  devSold\n  devSoldAll\n  eventType\n  holders\n  marketCap\n  networkId\n  price\n  protocol\n  sellCount1\n  transactions1\n  volume1\n  token {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    createdAt\n    imageSmallUrl\n    exchanges {\n      id\n      address\n      networkId\n      name\n      iconUrl\n    }\n    info {\n      address\n      id\n      networkId\n      symbol\n      imageThumbUrl\n      imageSmallUrl\n      imageLargeUrl\n    }\n    socialLinks {\n      twitter\n      telegram\n      website\n      discord\n    }\n    launchpad {\n      graduationPercent\n      poolAddress\n      completedAt\n      completed\n      completedSlot\n      migratedSlot\n      migratedAt\n      migrated\n      migratedPoolAddress\n    }\n  }\n}\n\nsubscription OnLaunchpadTokenEventBatch($input: OnLaunchpadTokenEventBatchInput) {\n  onLaunchpadTokenEventBatch(input: $input) {\n    ...LaunchpadTokenEvent\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LaunchpadFilterTokenResult on TokenFilterResult {\n  buyCount1\n  createdAt\n  holders\n  marketCap\n  priceUSD\n  sellCount1\n  uniqueTransactions1\n  volume1\n  exchanges {\n    id\n    address\n    networkId\n    name\n    iconUrl\n  }\n  token {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    createdAt\n    imageSmallUrl\n    info {\n      address\n      id\n      networkId\n      symbol\n      imageThumbUrl\n      imageSmallUrl\n      imageLargeUrl\n    }\n    socialLinks {\n      twitter\n      telegram\n      website\n      discord\n    }\n    launchpad {\n      graduationPercent\n      poolAddress\n      completedAt\n      completed\n      completedSlot\n      migratedSlot\n      migratedAt\n      migrated\n      migratedPoolAddress\n    }\n  }\n  pair {\n    address\n    networkId\n    exchangeHash\n    token0\n    token1\n    id\n  }\n}\n\nquery LaunchpadTokens($filters: TokenFilters, $statsType: TokenPairStatisticsType, $phrase: String, $tokens: [String], $rankings: [TokenRanking], $limit: Int, $offset: Int) {\n  filterTokens(\n    filters: $filters\n    statsType: $statsType\n    phrase: $phrase\n    tokens: $tokens\n    rankings: $rankings\n    limit: $limit\n    offset: $offset\n  ) {\n    results {\n      ...LaunchpadFilterTokenResult\n    }\n    count\n    page\n  }\n}"): (typeof documents)["fragment LaunchpadFilterTokenResult on TokenFilterResult {\n  buyCount1\n  createdAt\n  holders\n  marketCap\n  priceUSD\n  sellCount1\n  uniqueTransactions1\n  volume1\n  exchanges {\n    id\n    address\n    networkId\n    name\n    iconUrl\n  }\n  token {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    createdAt\n    imageSmallUrl\n    info {\n      address\n      id\n      networkId\n      symbol\n      imageThumbUrl\n      imageSmallUrl\n      imageLargeUrl\n    }\n    socialLinks {\n      twitter\n      telegram\n      website\n      discord\n    }\n    launchpad {\n      graduationPercent\n      poolAddress\n      completedAt\n      completed\n      completedSlot\n      migratedSlot\n      migratedAt\n      migrated\n      migratedPoolAddress\n    }\n  }\n  pair {\n    address\n    networkId\n    exchangeHash\n    token0\n    token1\n    id\n  }\n}\n\nquery LaunchpadTokens($filters: TokenFilters, $statsType: TokenPairStatisticsType, $phrase: String, $tokens: [String], $rankings: [TokenRanking], $limit: Int, $offset: Int) {\n  filterTokens(\n    filters: $filters\n    statsType: $statsType\n    phrase: $phrase\n    tokens: $tokens\n    rankings: $rankings\n    limit: $limit\n    offset: $offset\n  ) {\n    results {\n      ...LaunchpadFilterTokenResult\n    }\n    count\n    page\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment TokenPageItem on TokenFilterResult {\n  priceUSD\n  change24\n  volume24\n  txnCount24\n  lastTransaction\n  token {\n    id\n    address\n    name\n    symbol\n    info {\n      imageThumbUrl\n    }\n  }\n}\n\nquery TokensPage($filters: TokenFilters!, $rankings: [TokenRanking!], $limit: Int) {\n  filterTokens(filters: $filters, rankings: $rankings, limit: $limit) {\n    results {\n      ...TokenPageItem\n    }\n  }\n}"): (typeof documents)["fragment TokenPageItem on TokenFilterResult {\n  priceUSD\n  change24\n  volume24\n  txnCount24\n  lastTransaction\n  token {\n    id\n    address\n    name\n    symbol\n    info {\n      imageThumbUrl\n    }\n  }\n}\n\nquery TokensPage($filters: TokenFilters!, $rankings: [TokenRanking!], $limit: Int) {\n  filterTokens(filters: $filters, rankings: $rankings, limit: $limit) {\n    results {\n      ...TokenPageItem\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;